/* tagmanager.js */



    var categoryWidgetFieldName = 'subject';

    function isAdmin()
    {
        // Kind of hard to determine this from a JS perspective, but I'm basing
        // it off the presence of the 'Site-Setup' in the toolbar.

        site_setup = jq('#portal-personaltools dd li#personaltools-plone_setup')
    
        if (site_setup.size())
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    function findColumn(index, size, columns) {
        for (var i=1; i<=columns; i++) {
            if (index/size <= i/columns) {
                return i - 1;
            }
        }
    }


    function addToggleButton(container) {
        toggleBtn = jq('<input type="button" id="tagToggle" name="tagToggle" value="Toggle Tag Selector" class="standalone" />');
        toggleBtn.attr('status', 'new');
        toggleBtn.appendTo(container);

        toggleBtn.click( function () {
            var status = jq(this).attr('status');
            if (jq(this).attr('status') == 'new') {
                jq('#tag-button-container').hide();

                if (isAdmin())
                {
                    jq('#newTagsSection').show();
                }

                jq('#existingTagsSection').show();
                jq(this).attr('status', 'old');
            } else if (jq(this).attr('status') == 'old') {
                jq('#newTagsSection').hide();
                jq('#existingTagsSection').hide();
                setSelectedCategories();
                jq('#tag-button-container').show();
                jq(this).attr('status', 'new');
            }
        });
    }



    function addTagCategory(label) {

        // Do not create Administrative section if user is not admin

        if (label == 'Administrative' && !isAdmin())
        {
            return false;
        }
        
        // create a container div for this category which can be floated left
        var containerId = 'category-' + label.toLowerCase().replace(/ /g, '-');
        jq('#tag-button-container').append('<div id="' + containerId + '" class="category-container"></div');
        var categoryContainer = jq('#' + containerId);
        if (label != '' && label.substr(0, 7) != 'noshow-') {
            categoryContainer.append('<h3>' + label + '</h3>');
        }
        categoryContainer.append('<ul class="tagmanager"></ul>');
        var tagList = jq('#' + containerId + ' ul.tagmanager');
        return tagList;
    }



    function setSelectedCategories() {
        // determines which category buttons have keywords selected
        //  and adds the 'hastags' class to them.  Checks the checkboxes in the overlay
        jq("ul.tagmanager li").each(
            function(index) {
                tagprefix = jq(this).attr('tagprefix');

                if (getSelectedTags(tagprefix).size() > 0) {
                    jq(this).addClass('hastags');
                } else {
                    jq(this).removeClass('hastags');
                }
            }
        );

        // Inverse of setTags()
        
        jq('.tagmanager input[name="tagmanager"]').each(
            function () {
                tag_name = jq(this).attr('value');
                is_checked = jq(this).attr('checked');
                plone_checkbox = jq("#archetypes-fieldname-subject #existingTags input[value='" + tag_name + "']");
                plone_checkbox_checked = plone_checkbox.attr('checked')
                
                if (is_checked != plone_checkbox_checked)
                {
                    jq(this).attr('checked', plone_checkbox_checked);
                }
            }
        );

        
        
    }



    function getSelectedTags(prefix) {
        // gets all the selected keywords in the #existingTags listbox
        return jq("#existingTags input:checked[tagprefix='" + prefix + "']");
    }



    function getPrefixTags(prefix) {
        // get all the keywords with a certain prefix
        
        // The 'other' prefix is difficult, since the only way to know if a tag is 'other'
        // the first time is if it's visible after all other tags have been hidden.
        
        if (prefix == 'other') {
            // get the keywords that have not been assigned to a button yet
            not_buttons =  jq("#existingTags input[status!='button']");
                
            if (not_buttons.size() > 0) {
                // return the keywords not yet assigned
                return not_buttons;
            } else {
                // return the keywords assigned to 'other'
                return jq("#existingTags input[tagprefix^='" + prefix + "']");
            }
        } else {
            // return the keywords assigned to the provided prefix
            return jq("#existingTags input[value^='" + prefix + "']");
        }
    }



    function hideTagMultiSelect() {
        // find any of the options that have not already been hidden and
        //  assign them to the other category
        // then hide the #existingTags listbox
        
        var all = jq('#existingTags input').size();

        var button = jq('#existingTags input[status="button"]').size();
        
        // if all the options have not been assigned to a button/category,
        //  assign them to a new category (other)
        if (button < all) {
            categoryList = addTagCategory("Other");
            manageTags(categoryList, 'other', 'Other Tags');
        }
        
        // hide the listbox
        jq('#existingTagsSection').hide();
        
        if (!isAdmin())
        {
            jq('#newTagsSection').hide();
        }
    }


    function manageTags(list, prefix, label)
    {
        // this is where the magic happens!
        
        prefixTags = getPrefixTags(prefix);
        
        // get all the keywords with the specified prefix
        if (prefixTags.size() == 0)
        {
            return false;
        }

        // add two attributes to each keyword to indicate it's prefix and that
        // it's being assigned to a button/category
        prefixTags.each(
            function() {
                jq(this).attr('tagprefix', prefix);
                jq(this).attr('status', 'button');
            }
        );

        // create the entry for the button/category in the unordered list
        mainTagLink = jq('<li tagprefix="' + prefix + '"><input class="tagbutton" title="' + label + ' (' + prefix + 
                 '-*)" type="button" rel="#overlay-' + prefix + '" value="' + label + '" /> </li>');

        mainTagLink.appendTo(list);

        // Set up tag checkboxes

        overlayItem = jq('<div class="overlay" id="overlay-' + prefix + '">' + 
                                '<div class="pb-ajax">' +
                                    '<div class="overlaycontent" ></div>' +
                                    '<div class="visualClear">&nbsp;</div>' + 
                                '</div>' +
                            '</div>');
                            
        tagCheckboxes = overlayItem.find('.overlaycontent');
        
        tagprefix = prefix;
        category = label;                
        
        // define how many columns to create
        columnCount = 4;
        
        // define an array to hold the values for each column
        columnArray = new Array()

        tagCheckboxes.append('<h1>' + category + '</h1>');
        
        // create a container div for each column
        for (var i=0; i<columnCount; i++)
        {
            columnArray.push(jq('<div class="tag_container"></div>'));
            columnArray[i].appendTo(tagCheckboxes);
        }

        // get all the tags with the specified prefix
        existingTags = getPrefixTags(tagprefix);                

        // assign each keyword into a column
        for (var i=0; i<existingTags.size(); i++)
        {
            tag = existingTags.eq(i);

            tagColumn = findColumn(i, existingTags.size(), columnCount);
            tagContainer = columnArray[tagColumn];
            tagItem = jq('<div></div>');
            
            if (tagprefix == 'other')
            {
                // display the whole keyword
                tagLabelValue = tag.val();
            }
            else
            {
                // Remove the prefix
                tagLabelValue = tag.val().substring(tagprefix.length+1,tag.val().length)
                
                if (!tagLabelValue)
                {
                    tagLabelValue = tag.val();
                }
            }
            
            tagLabel = jq('<div>' + tagLabelValue + '</div>');
            checkbox = jq('<input name="tagmanager" type="checkbox" value="' + tag.val() + '" />')

            if (tag.attr("checked"))
            {
                checkbox.attr("checked", "checked");
            }

            checkbox.prependTo(tagLabel);
            tagLabel.appendTo(tagContainer);

        }

        buttons = jq('<div class="tag_buttons"><input class="close" type="button" value="Submit" /></div>');
        buttons.appendTo(tagCheckboxes);
                
        overlayItem.appendTo(jq('body'));

    }



function setTags()
{
    jq('.overlay input[name="tagmanager"]').each(
        function () {
            tag_name = jq(this).attr('value');
            is_checked = jq(this).attr('checked');
            plone_checkbox = jq("#archetypes-fieldname-subject #existingTags input[value='" + tag_name + "']");
            plone_checkbox_checked = plone_checkbox.attr('checked')
            
            if (is_checked != plone_checkbox_checked)
            {
                plone_checkbox.attr('checked', is_checked);
                plone_checkbox.click();
                plone_checkbox.attr('checked', is_checked);
            }
        }
    );

    setSelectedCategories();
}


jq(window).load(
    function () {
        
        if (jq.browser.msie)
        {
            // People shouldn't be editing in IE.
            return false;
        }
        
        // make sure that the categoryWidgetFieldName is right
        if (jq('#archetypes-fieldname-' + categoryWidgetFieldName).length <= 0) {
            categoryWidgetFieldName = 'eventType';
            if (jq('#archetypes-fieldname-' + categoryWidgetFieldName).length <= 0) {
                categoryWidgetFieldName = '';
            }
        }

        if (categoryWidgetFieldName != '') {
            
            // hide the existing and new category divs
            jq('#newTagsSection').hide();
            jq('#existingTagsSection').hide();
            
            // create a container to hold the new buttons
            jq('#archetypes-fieldname-' + categoryWidgetFieldName).append('<div id="tag-button-container"></div>');
            
            // add the categories and the buttons in each category
            <dtml-var tagmanager_config>
            
            // change the category buttons to indicate if they have selected keywords
            setSelectedCategories();

            // assign remaining keywords to the "other" category and hide the
            //  #existingTags listbox
            hideTagMultiSelect();

            // add a new/old toggle
            addToggleButton(jq('#archetypes-fieldname-' + categoryWidgetFieldName));

            // Set overlay

            jq("ul.tagmanager li input").overlay({
                oneInstance: true,
                mask: '#333333',
                closeOnClick: false,
                close: '.tag_buttons input.close',
                onClose: function () {
                    setTags()
                },
    
            });
            
            // clear the floats
            //jq('#archetypes-fieldname-' + categoryWidgetFieldName).append('<div class="visualClear"></div>');
            
        }
    }
)
