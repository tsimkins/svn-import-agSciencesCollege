/* tagmanager.js */

    function isAdmin()
    {
        // Kind of hard to determine this from a JS perspective, but I'm basing
        // it off the presence of the 'Site-Setup' in the toolbar.

        site_setup = jq('#portal-personaltools dd li#personaltools-plone_setup')
    
        if (site_setup.size())
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    function findColumn(index, size, columns)
    {
        for (var i=1; i<=columns; i++)
        {
            if (index/size <= i/columns)
            {
                return i - 1;
            }
        }
    }

    function addButtonContainer()
    {
        jq('<div id="tag_button_container"></div>').insertAfter(jq('#archetypes-fieldname-subject select#subject'))
    }
    
    function addTagCategory(label)
    {
        if (label == 'Administrative' && !isAdmin())
        {
            return false;
        }

        jq('<h3>' + label + '</h3>').appendTo('#tag_button_container');
        return jq('<ul class="tagmanager"></ul>').appendTo('#tag_button_container');
    }

    function setSelectedCategories()
    {
        jq("ul.tagmanager li").each(
            function(index)
            {
                tagprefix = jq(this).attr('tagprefix');

                if (getSelectedTags(tagprefix).size() > 0)
                {
                    jq(this).addClass('hastags');
                }
                else
                {
                    jq(this).removeClass('hastags');
                }
            }
        );
    }

    function getSelectedTags(prefix)
    {
        return jq("#archetypes-fieldname-subject select#subject option:selected[tagprefix='" + prefix + "']");
    }

    function getPrefixTags(prefix)
    {

        // The 'other' prefix is difficult, since the only way to know if a tag is 'other'
        // the first time is if it's visible after all other tags have been hidden.
        
        if (prefix == 'other')
        {
            not_buttons =  jq("#archetypes-fieldname-subject select#subject option[status!='button']");
            
            if (not_buttons.size() > 0)
            {
                return not_buttons;
            }
            else
            {
                return jq("#archetypes-fieldname-subject select#subject option[tagprefix^='" + prefix + "']");
            }
        }
        else
        {
            return jq("#archetypes-fieldname-subject select#subject option[value^='" + prefix + "']");
        }

    }

    function hideTagMultiSelect()
    {
        var all = jq('#archetypes-fieldname-subject select#subject option').size();
        var button = jq('#archetypes-fieldname-subject select#subject option[status="button"]').size();
        
        if (button < all)
        {
            var categoryList = addTagCategory("Other");
            manageTags(categoryList, 'other', 'Other Tags');
        }
        
        jq('#archetypes-fieldname-subject select#subject').hide();

        if (!isAdmin())
        {
            jq('#archetypes-fieldname-subject > div > span').hide();
            jq('#archetypes-fieldname-subject > div > br').hide();
            jq('#archetypes-fieldname-subject textarea#subject_keywords').parent().hide();
        }
    }

    function manageTags(list, prefix, label)
    {
        
        prefixTags = getPrefixTags(prefix);
        
        if (prefixTags.size() == 0)
        {
            return false;
        }

        prefixTags.each(
            function() {
                jq(this).attr('tagprefix', prefix);
                jq(this).attr('status', 'button');
            }
        );

        mainTagLink = jq('<li tagprefix="' + prefix + '"><input class="tagbutton" title="' + label + ' (' + prefix + 
                 '-*)" type="button" rel="#overlay-' + prefix + '" value="' + label + '" /> </li>');

        mainTagLink.appendTo(list);

        // Set up tag checkboxes

        overlayItem = jq('<div class="overlay" id="overlay-' + prefix + '">' + 
                                '<div class="pb-ajax">' +
                                    '<div class="overlaycontent" ></div>' +
                                    '<div class="visualClear">&nbsp;</div>' + 
                                '</div>' +
                            '</div>');
                            
        tagCheckboxes = overlayItem.find('.overlaycontent');
        
        tagprefix = prefix;
        category = label;                
        
        columnCount = 4;
        
        columnArray = new Array()

        tagCheckboxes.append('<h1>' + category + '</h1>');
        
        for (var i=0; i<columnCount; i++)
        {
            columnArray.push(jq('<div class="tag_container"></div>'));
            columnArray[i].appendTo(tagCheckboxes);
        }

        existingTags = getPrefixTags(tagprefix);                

        for (var i=0; i<existingTags.size(); i++)
        {
            tag = existingTags.eq(i);

            tagColumn = findColumn(i, existingTags.size(), columnCount);
            tagContainer = columnArray[tagColumn];
            tagItem = jq('<div></div>');
            
            if (tagprefix == 'other')
            {
                tagLabelValue = tag.val();
            }
            else
            {
                tagLabelValue = tag.val().substring(tagprefix.length+1,tag.val().length)
            }
            
            tagLabel = jq('<span>' + tagLabelValue + '</span><br />');
            checkbox = jq('<input name="tagmanager" type="checkbox" value="' + tag.val() + '" />')

            if (tag.attr("selected"))
            {
                checkbox.attr("checked", "checked");
            }

            checkbox.appendTo(tagContainer);
            tagLabel.appendTo(tagContainer);

        }

        buttons = jq('<div class="tag_buttons"><input class="close" type="button" value="Submit" /></div>');
        buttons.appendTo(tagCheckboxes);
                
        overlayItem.appendTo(mainTagLink);

    }


function setTags()
{
    jq('.tagmanager input[name="tagmanager"]').each(
        function () {
            tag_name = this.value
            is_checked = this.checked
            if (is_checked)
            {
                jq("#archetypes-fieldname-subject select#subject option[value='" + tag_name + "']").selected(true);
            }
            else
            {
                jq("#archetypes-fieldname-subject select#subject option[value='" + tag_name + "']").selected(false);
            }
        }
    );

    setSelectedCategories();
}

jq(document).ready(
    function () {
        addButtonContainer();
        <dtml-var tagmanager_config>
        setSelectedCategories();
        hideTagMultiSelect()
        jq("ul.tagmanager li input").overlay({
            oneInstance: true,
            mask: '#333333',
            closeOnClick: false,
            close: '.tag_buttons input.close',
            onClose: function () {
                setTags()
            },

        });
        
    }
)
