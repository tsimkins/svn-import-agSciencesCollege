/* tagmanager.js */

    function findColumn(index, size, columns)
    {
        for (var i=1; i<=columns; i++)
        {
            if (index/size <= i/columns)
            {
                return i - 1;
            }
        }
    }

    function addButtonContainer()
    {
        jq('<div id="tag_button_container"></div>').insertAfter(jq('#subject_existing_keywords'))
    }
    
    function addTagCategory(label)
    {
          jq('<h3>' + label + '</h3>').appendTo('#tag_button_container');
          return jq('<ul class="tagmanager"></ul>').appendTo('#tag_button_container');
    }

    function setSelectedCategories()
    {
        jq("ul.tagmanager li").each(
            function(index)
            {
                tagprefix = jq(this).attr('tagprefix');

                if (getSelectedTags(tagprefix).size() > 0)
                {
                    jq(this).addClass('hastags');
                }
                else
                {
                    jq(this).removeClass('hastags');
                }
            }
        );
    }

    function getSelectedTags(prefix)
    {
        return jq("#subject_existing_keywords option:selected[value^='" + prefix + "']");
    }

    function getPrefixTags(prefix)
    {

        // The 'other' prefix is difficult, since the only way to know if a tag is 'other'
        // the first time is if it's visible after all other tags have been hidden.
        
        if (prefix == 'other')
        {
            not_buttons =  jq("#subject_existing_keywords option[status!='button']");
            
            if (not_buttons.size() > 0)
            {
                return not_buttons;
            }
            else
            {
                return jq("#subject_existing_keywords option[tagprefix^='" + prefix + "']");
            }
        }
        else
        {
            return jq("#subject_existing_keywords option[value^='" + prefix + "']");
        }

    }

    function hideTagMultiSelect()
    {
        all = jq('#subject_existing_keywords option').size();
        button = jq('#subject_existing_keywords option[status="button"]').size();
        
        if (button < all)
        {
            categoryList = addTagCategory("Other");
            manageTags(categoryList, 'other', 'Other Tags');
        }
        
        jq('#subject_existing_keywords').hide();
    }

    function manageTags(list, prefix, label)
    {
        prefixTags = getPrefixTags(prefix);
        
        if (prefixTags.size() == 0)
        {
            return false;
        }

        prefixTags.each(
            function() {
                jq(this).attr('tagprefix', prefix);
                jq(this).attr('status', 'button');
            }
        );

        mainTagLink = jq('<li title="' + label + ' (' + prefix + '-*)">' + label + '</li>');
        mainTagLink.attr('tagprefix', prefix)
        mainTagLink.attr('category', label)
        mainTagLink.appendTo(list);

        mainTagLink.click(
            function() 
            { 
                tagprefix = jq(this).attr('tagprefix');
                category = jq(this).attr('category');                
                
                columnCount = 4;
                
                columnArray = new Array()

                modalTags = jq('<div id="modal_tags"><h1>' + category + ':</h1></div>');
                
                for (var i=0; i<columnCount; i++)
                {
                    columnArray.push(jq('<div class="tag_container"></div>'));
                    columnArray[i].appendTo(modalTags);
                }

                existingTags = getPrefixTags(tagprefix);                

                for (var i=0; i<existingTags.size(); i++)
                {
                    tag = existingTags.eq(i);

                    tagColumn = findColumn(i, existingTags.size(), columnCount);
                    tagContainer = columnArray[tagColumn];
                    tagItem = jq('<div></div>');
                    
                    if (tagprefix == 'other')
                    {
                        tagLabelValue = tag.val();
                    }
                    else
                    {
                        tagLabelValue = tag.val().substring(tagprefix.length+1,tag.val().length)
                    }
                    
                    tagLabel = jq('<span>' + tagLabelValue + '</span><br />');
                    checkbox = jq('<input name="extension_tag" type="checkbox" value="' + tag.val() + '" />')

                    if (tag.attr("selected"))
                    {
                        checkbox.attr("checked", "checked");
                    }

                    checkbox.appendTo(tagContainer);
                    tagLabel.appendTo(tagContainer);

                }
                
                buttons = jq('<div id="modal_buttons"></div>');
                jq('<input type="button" value="Cancel" class="simplemodal-close" /> ').appendTo(buttons);
                submit = jq('<input type="button" value="Submit" class="simplemodal-close" />');
                submit.click(
                    function () {
                        newTags = jq('#modal_tags input');
                        existingTags = jq('#subject_existing_keywords option');
                        for (var i=0; i<=newTags.size(); i++)
                        {
                            newTag = newTags.eq(i);

                            if (newTag.attr("type") == "checkbox")
                            {
                                for (var j=0; j<existingTags.size(); j++)
                                {
                                    oldTag = existingTags.eq(j);

                                    if (oldTag.val() == newTag.val())
                                    {
                                        oldTag.attr("selected", newTag.attr("checked"));
                                    }
                                }
                            }

                        }
                        setSelectedCategories();
                    }

                );
                submit.appendTo(buttons);
                buttons.appendTo(modalTags);
                
                modalTags.modal({minHeight:'500px', minWidth:'90%'}); 
                return false;
            }
        )

    }


jq(document).ready(
    function () {
        addButtonContainer();
        <dtml-var tagmanager_config>
        setSelectedCategories();
        hideTagMultiSelect()
    }
)
