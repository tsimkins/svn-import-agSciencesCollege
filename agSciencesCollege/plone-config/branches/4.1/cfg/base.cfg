######################################################
# Base Configuration; used by both standalone and zeo,
# which extend it.
# ---------------------------------------------------

# Buildout instructions in this file are
# usually only changed by experienced developers.
#
# Beyond here there be dragons!

[buildout]
eggs-directory=../buildout-cache/eggs
download-cache=../buildout-cache/downloads

# Don't download new things unless needed to satisfy dependencies.
# Override this on the command line with the "-n" flag.
newest = false

# Pick final releases over newer development releases when it's
# possible to do so and still fulfil requirements. Note that explicit
# version specifications will override this preference.
prefer-final = true

versions = versions

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org
    http://dist.plone.org/release/4.1.6
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads

# unzip all eggs for easier debugging
unzip = true

# Load the DumpPickedVersions extension, which will notify
# you of versions picked by buildout that were not specifically
# pinned.
extensions = buildout.dumppickedversions
extends-cache = /usr/local/plone/buildout-cache/downloads/extends




[zopepy]
# installs a zopepy python interpreter that runs with your
# full Zope environment
recipe = zc.recipe.egg
eggs = ${buildout:eggs}
interpreter = zopepy
scripts = zopepy




[unifiedinstaller]
# This recipe installs the plonectl script and a few other convenience
# items.
# For options see http://pypi.python.org/pypi/plone.recipe.unifiedinstaller
recipe = plone.recipe.unifiedinstaller
user = ${buildout:user}
primary-port = ${buildout:http-address}
sudo-command = sudo -u plone


[repozo]
# This recipe builds the repozo script for non-zeo installations.
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo


[backup]
# This recipe builds the backup, restore and snapshotbackup commands.
# For options see http://pypi.python.org/pypi/collective.recipe.backup
recipe = collective.recipe.backup
location = ${buildout:backups-dir}/backups
snapshotlocation = ${buildout:backups-dir}/snapshotbackups


[zeoserver]
# Use this section to install and configure a Zope
# Enterprise Objects server.
# For options see http://pypi.python.org/pypi/plone.recipe.zeoserver
recipe = plone.recipe.zeoserver
zeo-address = ${buildout:zeo-address}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
# Put the log, pid and socket files in var/zeoserver
zeo-log     = ${buildout:directory}/var/zeoserver/zeoserver.log
pid-file    = ${buildout:directory}/var/zeoserver/zeoserver.pid
socket-name = ${buildout:directory}/var/zeoserver/zeo.zdsock
#blob-storage = ${buildout:directory}/var/blobstorage
invalidation-queue-size = 500
storage-number = 1
file-storage = ${buildout:directory}/var/filestorage/Data.fs
# Multiple Data.fs's.  Note the updated /Data in blob-storage
blob-storage = ${buildout:directory}/var/blobstorage/Data

zeo-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zeo-custom.conf


[chown-zeo]
# This recipe is used to set permissions for root mode installs
# For options see http://pypi.python.org/pypi/plone.recipe.command
recipe = plone.recipe.command
command =
    echo Dummy references to force this to execute after referenced parts
    echo ${backup:location} ${unifiedinstaller:sudo-command}
    chmod 600 .installed.cfg
    touch ${buildout:directory}/var/zeoserver/zeoserver.log
#    find ${buildout:directory}/var -type d -exec chmod 750 {} \;
    chmod 744 ${buildout:directory}/bin/*
    chmod 755 ${buildout:directory}/bin/munin
update-command = ${chown-zeo:command}


[zopeskel]
# installs paster and Zopeskel
recipe = zc.recipe.egg
eggs =
    ZopeSkel
    Paste
    PasteDeploy
    PasteScript
    ${buildout:eggs}


[client1]
# Use this section to install and configure a Zope
# client instance.
# For options see http://pypi.python.org/pypi/plone.recipe.zope2instance
recipe = plone.recipe.zope2instance
zeo-client = true
zeo-address = ${zeoserver:zeo-address}
zeo-storage = 1
# The line below sets only the initial password. It will not change an
# existing password.
user = ${buildout:user}
# if we try to start as root, Zope will switch to the user below
effective-user = ${buildout:effective-user}
http-address = ${buildout:http-address}
blob-storage = ${zeoserver:blob-storage}
shared-blob = on
# change debug-mode to "on" to run in development mode
debug-mode = ${buildout:debug-mode}
# change verbose-security to "on" for detailed security
# errors while developing
verbose-security = ${buildout:verbose-security}
deprecation-warnings = ${buildout:deprecation-warnings}
# Put the log, pid, lock files in var/client1
event-log = ${buildout:directory}/var/client1/event.log
z2-log    = ${buildout:directory}/var/client1/Z2.log
pid-file  = ${buildout:directory}/var/client1/client1.pid
lock-file = ${buildout:directory}/var/client1/client1.lock
enable-product-installation = on
python-check-interval = 850

zope-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zope-primary.conf
    %include ${buildout:directory}/includes/zope-custom.conf

# Add publisher-profile-file for profiling in dev
#    publisher-profile-file ${buildout:directory}/profile.dat

# If you want Zope to know about any additional eggs, list them here.
# e.g. eggs = ${buildout:eggs} my.package
eggs = ${buildout:eggs}

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml = ${buildout:zcml}

products = ${buildout:directory}/products

# You may also control the environment variables for the instance.
environment-vars = ${buildout:environment-vars}


[client2]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client2-address}
event-log = ${buildout:directory}/var/client2/event.log
z2-log    = ${buildout:directory}/var/client2/Z2.log
pid-file  = ${buildout:directory}/var/client2/client2.pid
lock-file = ${buildout:directory}/var/client2/client2.lock

zope-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zope-custom.conf


[client3]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client3-address}
event-log = ${buildout:directory}/var/client3/event.log
z2-log    = ${buildout:directory}/var/client3/Z2.log
pid-file  = ${buildout:directory}/var/client3/client3.pid
lock-file = ${buildout:directory}/var/client3/client3.lock

zope-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zope-custom.conf

[client4]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client4-address}
event-log = ${buildout:directory}/var/client4/event.log
z2-log    = ${buildout:directory}/var/client4/Z2.log
pid-file  = ${buildout:directory}/var/client4/client4.pid
lock-file = ${buildout:directory}/var/client4/client4.lock

zope-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zope-custom.conf

[client5]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client5-address}
event-log = ${buildout:directory}/var/client5/event.log
z2-log    = ${buildout:directory}/var/client5/Z2.log
pid-file  = ${buildout:directory}/var/client5/client5.pid
lock-file = ${buildout:directory}/var/client5/client5.lock

zope-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zope-custom.conf

[client6]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client6-address}
event-log = ${buildout:directory}/var/client6/event.log
z2-log    = ${buildout:directory}/var/client6/Z2.log
pid-file  = ${buildout:directory}/var/client6/client6.pid
lock-file = ${buildout:directory}/var/client6/client6.lock

zope-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zope-custom.conf

[client7]
# a copy of client1, except adjusted address and var location
<= client1
http-address = ${buildout:client7-address}
event-log = ${buildout:directory}/var/client7/event.log
z2-log    = ${buildout:directory}/var/client7/Z2.log
pid-file  = ${buildout:directory}/var/client7/client7.pid
lock-file = ${buildout:directory}/var/client7/client7.lock

zope-conf-additional = %define BLOBDIR ${buildout:directory}/var/blobstorage
    %define DATAFS ${buildout:directory}/var/filestorage
    %define DATAFS_2 ${buildout:directory}/var-2/filestorage
    %define BLOBDIR_2 ${buildout:directory}/var-2/blobstorage
    %include ${buildout:directory}/includes/zope-custom.conf


# Added per http://www.uwosh.edu/ploneprojects/docs/how-tos/how-to-set-file-and-image-size-limits-in-a-zeo-cluster-environment

[atcontenttypes-conf]
recipe                 = plone.recipe.atcontenttypes
zope-instance-location = ${buildout:directory}/parts/client1
                         ${buildout:directory}/parts/client2
                         ${buildout:directory}/parts/client3
max-image-dimension    = ATNewsItem:1200,900

