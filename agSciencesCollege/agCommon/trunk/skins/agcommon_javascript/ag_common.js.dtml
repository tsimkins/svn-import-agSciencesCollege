/*
  <dtml-with base_properties> (do not remove this)
  <dtml-call "REQUEST.set('portal_url', portal_url())"> (not this either)
*/

/* YOUR JAVASCRIPT START HERE */


// This makes the left column and the center column the same size

function resizeColumns()
{
    setTimeout("doresizeColumns()", 300);
}

function doresizeColumns()
{
    // For front page, equalize center column height 
    var bodyClass = document.body.className;
    var contentWrapper = document.getElementById("portal-column-content");
    var centerColumn = document.getElementById("centercolumn");
    var personalTools = document.getElementById("portal-personaltools");

    if(!personalTools && bodyClass.match(/template-document_homepage_view/) && contentWrapper && centerColumn && (msieversion() >= 8 || msieversion() == 0))
    {
        centerColumn.style.height = "auto";
        iHeight = centerColumn.offsetHeight;

        // failsafe so we don't infinitely loop in case something isn't as we thought.
        failsafe = 0;

        // 3 is the margin between the right inside column and the bottom.  Otherwise we go into an infinite loop!

        while (failsafe<500 && (centerColumn.offsetTop + centerColumn.offsetHeight) < (contentWrapper.offsetTop + contentWrapper.offsetHeight - 3))
        {
            iHeight++;
            failsafe++;
            centerColumn.style.height = iHeight + "px";
        }
        
    }
}

function msieversion()
{
    var ua = window.navigator.userAgent
    var msie = ua.indexOf ( "MSIE " )
    
    if ( msie > 0 )      // If Internet Explorer, return version number
        return parseInt (ua.substring (msie+5, ua.indexOf (".", msie )))
    else                 // If another browser, return 0
        return 0

}


function getElement(theId, vPadding, IEvPadding)
{
    var theElement = document.getElementById(theId) ? document.getElementById(theId) : document.createElement("div");
    theElement.elementHeight = theElement.offsetHeight ? theElement.offsetHeight : theElement.pixelHeight;
    theElement.style.height = "auto";

    if (!vPadding)
    {
        vPadding = 0;
    }

    if (document.all && IEvPadding)
    {
        theElement.vPadding = IEvPadding;
    }
    else
    {
        theElement.vPadding = vPadding;
    }
    
    return theElement;
}

function setSearch()
{
    var theSearchButton = document.getElementById("goSearch");
    var theSearchDropdown = document.getElementById("searchSource");    
    var thePloneSearchForm = document.getElementById("plonesearchform");

    if (theSearchButton && theSearchDropdown && thePloneSearchForm)
    {
        theSearchDropdown.style.display = "inline";

        theSearchButton.onclick = function () {
            return searchOnSubmit();
        }
        
        thePloneSearchForm.onsubmit = function () {
            return searchOnSubmit();
        }
    }        
}

function searchOnSubmit()
{
    var theSearchDropdown = document.getElementById("searchSource");            
    var theSearchForm = document.getElementById("GoogleSearch");
    var theSearchBox = document.getElementById("SearchableText");
    var theCustomSearchBox = document.getElementById("GoogleCustomSearch");
    var currentfolderCheckbox = document.getElementById("searchbox_currentfolder_only");

    if (theSearchDropdown && theSearchForm && theSearchBox && theCustomSearchBox && currentfolderCheckbox)
    {
        var theSearchOption = theSearchDropdown.options[theSearchDropdown.selectedIndex].value;

        if (theSearchOption == "section")
        {
            currentfolderCheckbox.checked = true;
            return true;
        }
        else if (theSearchOption == "college")
        {
            theCustomSearchBox.q.value = theSearchBox.value;
            theCustomSearchBox.submit();
            return false;
        }
        else if (theSearchOption == "psu")
        {
            theSearchForm.q.value = theSearchBox.value;
            theSearchForm.submit();
            return false;
        }
        else
        {
            currentfolderCheckbox.checked = false;
            return true;
        }
    }
    
}

registerPloneFunction(setSearch);
registerPloneFunction(resizeColumns);

/* Show mobile version link for mobile browsers */

jq(document).ready( function () {
    var mobileRegex = /(iphone|ipod|android|blackberry|symbian|midp|windows ce|treo|webos|mobile safari)/;
    var userAgent = navigator.userAgent.toLowerCase();

    if (mobileRegex.test(userAgent))
    {
        jq("#visual-portal-wrapper").prepend(jq('<div id="mobile-version"><a href="m">Mobile Version</a></div>'));
    }

    
} );


/* Hide Short Name from Add screen */

jq(document).ready( function () {

    if (jq("#archetypes-fieldname-id input").val())
    {
        jq("#archetypes-fieldname-id").show();
    }
    else
    {
        jq("body.template-atct_edit #archetypes-fieldname-title label.formQuestion").dblclick(function() {
            if (confirm("Only set the short name if you absolutely have to."))
            {
                jq("body.template-atct_edit #archetypes-fieldname-id").show();
            }
        });
    }

} );


/*
   if body custom css class includes 'semicolon-delimited', then split the description into separate lines delimited by semicolon
*/

jq(document).ready(
	function () {
        jq('body.custom-semicolon-delimited #content .description, body.custom-semicolon-delimited #content .documentDescription #parent-fieldname-description, body.custom-semicolon-delimited #content #parent-fieldname-description .documentDescription').each(
        
            function()
            {
                var lines = this.innerHTML.split(";");
    
                var new_html =  "<ul>";
    
                for (var i=0; i<lines.length; i++)
                {
                    var line_text = lines[i];
                    
                    if (line_text.match(":"))
                    {
                        list = line_text.split(":");
                        line_text = "<strong>" + list[0] + ":</strong>" + list[1];
                    }
                    
                    new_html = new_html + "<li>" + line_text + "</li>";
                }
    
                new_html = new_html + "</ul>";
                
                this.innerHTML = new_html
            }
        );

	}
)


/* For folders with the 'two_column' property set, split the folder listing into two columns */

jq(document).ready(
	function () {

        isTwoColumn = jq('body.custom-two-column').length;
        
        if (isTwoColumn)
        {
            // Grab items from Summary View

            summary_items = jq('body.custom-two-column #content>div>.tileItem');
            insert_after = jq('body.custom-two-column #content>div>.tileItem:last');
    
            if (summary_items.length == 0)
            {
                summary_items = jq('body.custom-two-column #content>div>.tileItem');
                insert_after = jq('body.custom-two-column #content>div>.tileItem:last');
            }


            // Grab items from Standard View
                
            listing_items = jq('body.custom-two-column #content .tileTitle');

            // Process Summary Items
    
            if (summary_items.length >= 1)
            {
                
                first_column_items = Math.ceil(summary_items.length/2)
    
                two_column_left = jq('<div id="two-column-left"></div>');
                two_column_right = jq('<div id="two-column-right"></div>');
    
                insert_after.after('<div class="visualClear">&nbsp;</div>');   
                insert_after.after(two_column_right);        
                insert_after.after(two_column_left);
                
                item_count = 0;
    
                summary_items.each(

                    function()
                    {
                        item_count++;
    
                        if (item_count <= first_column_items)
                        {
                            two_column_left.append(this);
                        }
                        else
                        {
                            two_column_right.append(this);
                        }
    
                    }
                );
                
            }
    
            else if (listing_items.length >= 1)
            {
                first_column_items = Math.ceil(listing_items.length/2)
    
                two_column_left = jq('<dl id="two-column-left"></dl>');
                two_column_right = jq('<dl id="two-column-right"></dl>');

                theList = jq('body.custom-two-column #content dl:not(#history)');
    
                theList.before(two_column_left);
                theList.before(two_column_right);  
                theList.before('<div class="visualClear">&nbsp;</div>');   
                
                item_count = 0;
    
                jq('body.custom-two-column #content .tileTitle').each(
                    function()
                    {
                        if (this.nodeName == 'H3')
                        {
                            item_count++;
                        }
    
                        if (item_count <= first_column_items)
                        {
                            two_column_left.append(this);
                        }
                        else
                        {
                            two_column_right.append(this);
                        }
    
                    }
                );
                
            }
    	}
	}
)

/*
   Makes event dates easier to work with.
   From: https://weblion.psu.edu/trac/weblion/wiki/EventDates
*/

function getEventDate(dateType) {
    // validate the dateType
    if (dateType == "startDate") {
        dateType += "_0";
    } else if (dateType == "endDate") {
        dateType += "_1";
    } else {
        dateType = "";
    }

    if (dateType != "") {
        // grab all the fields for the date
        year = jq("#edit_form_" + dateType + "_year").val();
        month = jq("#edit_form_" + dateType + "_month").val();
        day = jq("#edit_form_" + dateType + "_day").val();
        hour = jq("#edit_form_" + dateType + "_hour").val();
        minute = jq("#edit_form_" + dateType + "_minute").val();
        ampm = jq("#edit_form_" + dateType + "_ampm").val();

        // handle the ampm
        if (hour == 12 && ampm == "AM") {
            hour = 0;
        } else if (hour < 12 && ampm == "PM") {
            hour = parseInt(hour) + 12;
        }
        // convert the date fields to a javascript date object and return it
        // Decrement month by 1, because JavaScript months run from 0-11
        return new Date(year, month-1, day, hour, minute, 0, 0);

    } else {
        return "";
    }
}


function setEventDate(dateType, dateObj) {
    // validate the dateType
    if (dateType == "startDate") {
        dateType += "_0";
    } else if (dateType == "endDate") {
        dateType += "_1";
    } else {
        dateType = "";
    }

    if (dateType != "") {
        // set the fields
        jq("#edit_form_" + dateType + "_year").val( dateObj.getFullYear() );
        jq("#edit_form_" + dateType + "_month").val( formatNumberForSelectBox(dateObj.getMonth() + 1) );
        jq("#edit_form_" + dateType + "_day").val( formatNumberForSelectBox(dateObj.getDate()) );
        jq("#edit_form_" + dateType + "_minute").val( formatNumberForSelectBox(dateObj.getMinutes()) );

        // handle the ampm
        var hours = dateObj.getHours();
        if (hours == 0) {
            jq("#edit_form_" + dateType + "_hour").val("12");
            jq("#edit_form_" + dateType + "_ampm").val("AM");
        } else if (hours == 12) {
            jq("#edit_form_" + dateType + "_hour").val("12");
            jq("#edit_form_" + dateType + "_ampm").val("PM");
        } else if (hours > 12) {
            jq("#edit_form_" + dateType + "_hour").val( formatNumberForSelectBox(hours - 12) );
            jq("#edit_form_" + dateType + "_ampm").val("PM");
        } else {
            jq("#edit_form_" + dateType + "_hour").val( formatNumberForSelectBox(hours) );
            jq("#edit_form_" + dateType + "_ampm").val("AM");
        }
    }
}


function formatNumberForSelectBox(aNumber) {
    // if the number is less than 10, add a 0 in front
    if (aNumber < 10) {
        aNumber = "0" + aNumber;
    }

    return aNumber;
}


function roundUpDateToNearestHour(dateObj) {
    if (dateObj.getMinutes() != 0) {
        dateObj.setMinutes(0);
        dateObj.setTime(dateObj.getTime() + (60*60*1000));
    }

    return dateObj;
}


function onStartDateChange () {
    if (okToChangeEventEndDate) {
        var currentEndDate = getEventDate("endDate");
        if (eventOriginalEndDate.getTime() == currentEndDate.getTime()) {
            currentEndDate.setTime(getEventDate("startDate").getTime() + (60*60*1000));
            setEventDate("endDate", currentEndDate);
            eventOriginalEndDate = currentEndDate;
        } else {
            okToChangeEventEndDate = false;
        }
    }
}


var okToChangeEventEndDate = false;
var eventOriginalEndDate = new Date();

jq(document).ready(
    function () {

        // If we're in edit mode, don't do anything.
        if (jq("#archetypes-fieldname-id input").val())
        {
            return false;
        }

        // get the start date from the form 
        var eventStartDate = getEventDate("startDate");

        // does the start date match the end date (aka are we adding an event?)
        if (eventStartDate.getTime() == getEventDate("endDate").getTime()) {

            // Our convention is that if both dates are set to Midnight, (12:00am)
            // and both dates are the same, then we leave the hours part off of 
            // any display.  Making an exception for this case so we don't accidentally
            // set midnight to 1am events.
            
            if (eventStartDate.getHours() == 0 && eventStartDate.getMinutes() == 0)
            {
                return false;
            }

            // the start date is the current date, so it's ok to mess with them
            okToChangeEventEndDate = true;

            // round up the start date to the nearest whole hour
            eventStartDate = roundUpDateToNearestHour( eventStartDate );
            setEventDate("startDate", eventStartDate);

            // set the end date to be one hour from now
            eventOriginalEndDate.setTime(eventStartDate.getTime() + (60*60*1000));
            setEventDate("endDate", eventOriginalEndDate);

            // assign change events for all the start date fields
            jq("#edit_form_startDate_0_year").change( function () { onStartDateChange(); } );
            jq("#edit_form_startDate_0_month").change( function () { onStartDateChange(); } );
            jq("#edit_form_startDate_0_day").change( function () { onStartDateChange(); } );
            jq("#edit_form_startDate_0_hour").change( function () { onStartDateChange(); } );
            jq("#edit_form_startDate_0_minute").change( function () { onStartDateChange(); } );
            jq("#edit_form_startDate_0_ampm").change( function () { onStartDateChange(); } );
        }
    }
);

/*
    Using ugly browser version checking to add two-column factsheet printing to 
    AddThis bar.  This only works in Firefox.
*/

jq(document).ready(
    function () {
        isFactSheet = jq('body.template-factsheet_view').length;

        if (isFactSheet)
        {
            var browser_mozilla = jq.browser.mozilla;
            var browser_version = jq.browser.version.split('.', 1);
            if (browser_mozilla && browser_version >= 4)
            {
                var two_column = jq('body.template-factsheet_view .addthis_toolbox .two_column_print');
                two_column.show();
                two_column.click(function () {

                
                alert("This is an experimental feature for printing factsheets in two columns that is only available in Firefox 4 and above. If it doesn't print well, just click on the printer icon to print in a single column.\n\nRecommended settings:\n\n  * Check 'Ignore Scaling and Shrink To Fit Page Width' in 'Print' Dialog.\n  * Go to about:config and set print.print_margin_* to 0.25.");
                jq('body').addClass('two_column_print');
                window.print();
                jq('body').removeClass('two_column_print');
            });
            }
        }
    }
);

/* Add an 'Are you SURE you want to delete your data?' prompt to the 'Clear Saved Input' box on the save data adapter. */
jq(document).ready(
    function () {

        jq('body.portaltype-formsavedataadapter #content form input[name="clearSavedFormInput"]').parent().submit(
            function(event) {
                return confirm('Are you sure you want to clear the saved data?');
            }
        );

    }
);


/* Top navigation equalizer */

jq(document).ready(
    function() {
        equalizeTopNav();
    }
);

jq(window).resize(
    function() {
        equalizeTopNav();
    }
);
    
function equalizeTopNav() {

    if (window.innerWidth <= 500)
    {
        return false;
    }
        
    topnav = jq('#portal-top-navigation');
    topnavitems = jq('#portal-top-navigation li a');
    min_padding = 4;
    if (topnav && topnavitems)
    {
        topnav_width = topnav.width();
        topnav_width += Number(topnav.css('padding-left').replace('px', ''));                        
        topnav_width += Number(topnav.css('padding-right').replace('px', ''));                        
        topnav_width += Number(topnav.css('margin-left').replace('px', ''));                        
        topnav_width += Number(topnav.css('margin-right').replace('px', '')); 
        topnav_width += Number(topnav.css('border-left-width').replace('px', '')); 
        topnav_width += Number(topnav.css('border-right-width').replace('px', '')); 

        total_item_width = 0;

        topnavitems.each(
            function() {
                item_width = jq(this).width();
                item_width += Number(jq(this).css('padding-left').replace('px', ''));                        
                item_width += Number(jq(this).css('padding-right').replace('px', ''));                        
                item_width += Number(jq(this).css('margin-left').replace('px', ''));                        
                item_width += Number(jq(this).css('margin-right').replace('px', ''));
                item_width += Number(jq(this).css('border-left-width').replace('px', ''));                        
                item_width += Number(jq(this).css('border-right-width').replace('px', ''));
                total_item_width += item_width;
            }
        );

        additional_item_padding = Number( ((topnav_width - total_item_width)/topnavitems.size())/2  );

        max_padding = 50;
        
        if (additional_item_padding > max_padding)
        {
            additional_item_padding = max_padding;
        }

        topnavitems.each(
            function() {
                new_left_padding  = Math.max(min_padding, parseInt(Number(jq(this).css('padding-left').replace('px', '')) + additional_item_padding)) - 0.5;
                new_right_padding = Math.max(min_padding, parseInt(Number(jq(this).css('padding-left').replace('px', '')) + additional_item_padding)) - 0.5;
                jq(this).css('padding-left', new_left_padding + 'px');
                jq(this).css('padding-right', new_right_padding + 'px');
            }
        );

    }
}

/* YOUR JAVASCRIPT STOPS HERE */

/* </dtml-with> */

