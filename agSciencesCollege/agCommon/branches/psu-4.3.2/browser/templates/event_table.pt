<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="context/main_template/macros/master"
      i18n:domain="plone">

  <head><title></title></head>

  <metal:javascript_head fill-slot="javascript_head_slot">
    <tal:block define="macro context/archetypes_custom_js/macros/javascript_head | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
    <tal:comment replace="nothing">
      Many of the following defines duplicated from the tal:defines in the
      main slot. With base_edit, edit_macros could be reused as it was defined
      for the entire document. base_view uses main_template and thus must
      create additional defines for each slot it fills.
    </tal:comment>
    <tal:js define="fields python:here.Schema().viewableFields(here);
                    js python:here.getUniqueWidgetAttr(fields, 'helper_js')"
            condition="js"
            repeat="item js">
      <script type="text/javascript"
              charset="iso-8859-1"
              tal:condition="python:exists('portal/%s' % item)"
              tal:attributes="src string:$portal_url/$item">
      </script>
    </tal:js>
    <tal:block define="portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
                       view_template python:'%s_view' % portal_type;
                       view_macros python:path('context/%s/macros|nothing' % view_template);
                       macro view_macros/js | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
  </metal:javascript_head>

  <metal:css fill-slot="css_slot">
    <tal:comment replace="nothing">
      Many of the following defines duplicated from the tal:defines in the
      main slot. With base_edit, edit_macros could be reused as it was defined
      for the entire document. base_view uses main_template and thus must
      create additional defines for each slot it fills.
    </tal:comment>
    <tal:css define="fields python:here.Schema().viewableFields(here);
                     css python:here.getUniqueWidgetAttr(fields, 'helper_css')"
             condition="css"
             repeat="item css">
      <style type="text/css"
             media="all"
             tal:condition="python:exists('portal/%s' % item)"
             tal:content="structure string:<!-- @import url($portal_url/$item); -->">
      </style>
    </tal:css>
    <tal:block define="portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
                       view_template python:'%s_view' % portal_type;
                       view_macros python:path('context/%s/macros|nothing' % view_template);
                       macro view_macros/css | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
  </metal:css>

  <body>
    <metal:fill fill-slot="content-core">
      <metal:main_macro define-macro="content-core"
            tal:define="contentFilter contentFilter|request/contentFilter|nothing;
            contentFilter python:contentFilter and dict(contentFilter) or {};
            portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
            base_macros context/base/macros;
            standalone_view python:True;
            view_template python:'%s_view' % portal_type;
            view_macros python:path('context/%s/macros|nothing' % view_template);
            errors python:request.get('errors', {});
            toLocalizedTime nocall: context/@@plone/toLocalizedTime;
            kssClassesView context/@@kss_field_decorator_view;
            getKssClasses nocall:kssClassesView/getKssClassesInlineEditable;
            normalizeString nocall: context/plone_utils/normalizeString;
            templateId template/getId;
            view_data python: view.data(contentFilter);
            data_count python:view_data and len(view_data) or 0;">

        <tal:bymonth repeat="month view_data">

            <h2 class="section-title" tal:content="month/label" />

            <table class="listing events" summary="Event Listing">
                <thead>
                    <tr>
                        <th scope="col">Event</th>
                        <th scope="col">Date</th>
                        <th scope="col">Location</th>
                    </tr>
                </thead>
                <tbody>
                    <tal:items define="folderContents python:month.get('items')"
                        tal:repeat="item folderContents">
                        <tr tal:define="oddrow repeat/item/odd;
                                        item_type item/portal_type;
                                        item_start item/start|item/StartDate|nothing;
                                        item_end item/end|item/EndDate|nothing;
                                        item_sametime python: item_start == item_end;
                                        item_samedate python: (item_end - item_start &lt; 1) if item_type == 'Event' else False;
                                        item_url item/getURL|item/absolute_url;
                                        isCanceled item/eventCanceled|nothing;
                                        item_wf_state item/review_state|python: context.portal_workflow.getInfoFor(item, 'review_state', '');
                                        item_wf_state_class python:'state-' + normalizeString(item_wf_state);
                                        "
                            tal:attributes="class python:oddrow and 'even' or 'odd'">
                            <td>
                                <a href="#"
                                   tal:attributes="href item_url;
                                                   title item/Description;
                                                   class item_wf_state_class"
                                   tal:content="item/pretty_title_or_id">
                                    Item Title
                                </a>
                                <div class="listingWarning" tal:define="item_object item/getObject" tal:condition="isCanceled">Event Canceled</div>
                            </td>
                            <td tal:attributes="class python:isCanceled and 'canceled' or ''">
                                <div metal:use-macro="context/@@folder_listing_z3/macros/short_event_date" />
                            </td>
                            <td tal:attributes="class python:isCanceled and 'canceled' or ''">
                                <div metal:use-macro="context/@@folder_listing_z3/macros/event_location" />
                            </td>
                        </tr>
                    </tal:items>
                </tbody>
            </table>
        </tal:bymonth>

      </metal:main_macro>
    </metal:fill>

    <metal:fill fill-slot="content-text">
        <div metal:use-macro="context/@@folder_listing_z3/macros/text-field-view" />
    </metal:fill>

  </body>
</html>
